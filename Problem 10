#part a

import numpy as np
import matplotlib.pyplot as plt

# Define the range of f values (frequency domain)
f_min = -10
f_max = 10
num_f_points = 1000
f_values = np.linspace(f_min, f_max, num_f_points)


# Compute the numerical Fourier transform using numerical integration
def f(x):
    return np.exp(-2 * np.abs(x))

def fourier_transform_f(x_values, k_values):
    result = np.zeros_like(k_values, dtype=np.complex128)
    for i, k in enumerate(k_values):
        integral = np.sum(f(x_values) * np.exp(-1j * k * x_values))
        result[i] = (np.sqrt(np.pi*2))*integral * (x_values[1] - x_values[0])/np.sqrt(2*np.pi) # assuming uniform spacing dx
    return result

x_FT_numerical_values = fourier_transform_f(f_values, f_values)

# Plot the real and imaginary parts of the Fourier transform
plt.plot(f_values, np.real(x_FT_numerical_values), label='Real part')
plt.plot(f_values, np.imag(x_FT_numerical_values), label='Imaginary part')

plt.xlabel('Frequency (f)')
plt.ylabel('Fourier Transform')
plt.title('Real and Imaginary Parts of Fourier Transform')
plt.legend()
plt.xlim(-10, 10)  # Adjust x-axis limits
plt.grid(True)
plt.show()


#Part b

import numpy as np
import matplotlib.pyplot as plt

# Define the range of f values (frequency domain)
f_min = -10
f_max = 10
num_f_points = 1000
f_values = np.linspace(f_min, f_max, num_f_points)

# Analytical solution
def F(w):
    return np.sqrt(8/np.pi) * 1/(w**2 + 4)

# Analytical Fourier transform
analytical_FT = F(f_values) * np.sqrt(2*np.pi)

# Compute the numerical Fourier transform using numerical integration
def f(x):
    return np.exp(-2 * np.abs(x))

def fourier_transform_f(x_values, k_values):
    result = np.zeros_like(k_values, dtype=np.complex128)
    for i, k in enumerate(k_values):
        integral = np.sum(f(x_values) * np.exp(-1j * k * x_values))
        result[i] = (np.sqrt(np.pi*2))*integral * (x_values[1] - x_values[0])/np.sqrt(2*np.pi) # assuming uniform spacing dx
    return result

x_FT_numerical_values = fourier_transform_f(f_values, f_values)

# Plot all three Fourier transform results
plt.plot(f_values, analytical_FT, color='b', label='Analytical')
plt.plot(f_values, np.real(x_FT_numerical_values), label='Numerical (Python)')

plt.xlabel('Frequency (f)')
plt.ylabel('Fourier Transform')
plt.title('Comparison of Fourier Transform of sinc function')
plt.legend()
plt.xlim(-10, 10)  # Adjust x-axis limits
plt.grid(True)
plt.show()
